##########################################################################################
正在解析类型: HASTMap<HSTKeyValIter const &&,HSTKeyValIterLess>
{
  "HASTMap": {
    "HASTMap_T1": "HSTKeyValIter const **",
    "HASTMap_T2": "HSTKeyValIterLess"
  }
}
------------------------------------------------------
struct map_HSTKeyValIter_const_HSTKeyValIterLess {
  map_HSTKeyValIter_const_HSTKeyValIterLess *next;
  HSTKeyValIter const ** Key;
  HSTKeyValIterLess Value;
  hash hash_code;
};
struct HMap_map_HSTKeyValIter_const_HSTKeyValIterLess {
  map_HSTKeyValIter_const_HSTKeyValIterLess *inherit__0x0;
};


##########################################################################################
正在解析类型: std::map<unsigned int, double>
{
  "std::map": {
    "std::map_T1": "unsigned int",
    "std::map_T2": "double"
  }
}
------------------------------------------------------
struct map_unsigned_int_double {
  map_unsigned_int_double *next;
  unsigned int Key;
  double Value;
  hash hash_code;
};


##########################################################################################
正在解析类型: HSTVector<rt::nodegraph::Node*>
{
  "HSTVector": {
    "HSTVector_T1": "rt::nodegraph::Node*"
  }
}
------------------------------------------------------
struct vec_rt_nodegraph_Node {
  rt::nodegraph::Node* *vector_begin_0x0;
  rt::nodegraph::Node* *vector_end_0x8;
  rt::nodegraph::Node* *vector_cap_end_0x10;
};
struct HVec_vec_rt_nodegraph_Node {
  vec_rt_nodegraph_Node *inherit__0x0;
  int64_t hash_code;
};


##########################################################################################
正在解析类型: HASTMap<HASTSet<HSTKeyValIter const &&>*,HSTKeyValIterLess>
{
  "HASTMap": {
    "HASTMap_T1": {
      "HASTSet": {
        "HASTSet_T1": "HSTKeyValIter const **"
      }
    },
    "HASTMap_T2": "HSTKeyValIterLess"
  }
}
------------------------------------------------------
struct set_HSTKeyValIter_const {
  set_HSTKeyValIter_const *next;
  HSTKeyValIter const ** Key;
};
struct HSet_set_HSTKeyValIter_const {
  set_HSTKeyValIter_const *inherit__0x0;
};
struct map_HSet_set_HSTKeyValIter_const_HSTKeyValIterLess {
  map_HSet_set_HSTKeyValIter_const_HSTKeyValIterLess *next;
  HSet_set_HSTKeyValIter_const Key;
  HSTKeyValIterLess Value;
  hash hash_code;
};
struct HMap_map_HSet_set_HSTKeyValIter_const_HSTKeyValIterLess {
  map_HSet_set_HSTKeyValIter_const_HSTKeyValIterLess *inherit__0x0;
};


##########################################################################################
正在解析类型: std::vector<rt::nodegraph::Node*>
{
  "std::vector": {
    "std::vector_T1": "rt::nodegraph::Node*"
  }
}
------------------------------------------------------
struct vec_rt_nodegraph_Node {
  rt::nodegraph::Node* *vector_begin_0x0;
  rt::nodegraph::Node* *vector_end_0x8;
  rt::nodegraph::Node* *vector_cap_end_0x10;
};


##########################################################################################
正在解析类型: std::vector<std::vector<rt::nodegraph::Node*>>
{
  "std::vector": {
    "std::vector_T1": {
      "std::vector": {
        "std::vector_T1": "rt::nodegraph::Node*"
      }
    }
  }
}
------------------------------------------------------
struct vec_rt_nodegraph_Node {
  rt::nodegraph::Node* *vector_begin_0x0;
  rt::nodegraph::Node* *vector_end_0x8;
  rt::nodegraph::Node* *vector_cap_end_0x10;
};
struct vec_vec_rt_nodegraph_Node {
  vec_rt_nodegraph_Node *vector_begin_0x0;
  vec_rt_nodegraph_Node *vector_end_0x8;
  vec_rt_nodegraph_Node *vector_cap_end_0x10;
};


##########################################################################################
正在解析类型: std::set<HSTKeyValIter const *,HSTKeyValIterLess>
{
  "std::set": {
    "std::set_T1": "HSTKeyValIter const *"
  }
}
------------------------------------------------------
struct set_HSTKeyValIter_const {
  set_HSTKeyValIter_const *next;
  HSTKeyValIter const * Key;
};


##########################################################################################
正在解析类型: std::set<std::set<HSTKeyValIter const &&>*,HSTKeyValIterLess>
{
  "std::set": {
    "std::set_T1": {
      "std::set": {
        "std::set_T1": "HSTKeyValIter const **"
      }
    }
  }
}
------------------------------------------------------
struct set_HSTKeyValIter_const {
  set_HSTKeyValIter_const *next;
  HSTKeyValIter const ** Key;
};
struct set_set_HSTKeyValIter_const {
  set_set_HSTKeyValIter_const *next;
  set_HSTKeyValIter_const Key;
};


##########################################################################################
正在解析类型: std::unordered_set<std::set<HSTKeyValIter const &&>*,HSTKeyValIterLess>
{
  "std::unordered_set": {
    "std::unordered_set_T1": {
      "std::set": {
        "std::set_T1": "HSTKeyValIter const **"
      }
    }
  }
}
------------------------------------------------------
struct set_HSTKeyValIter_const {
  set_HSTKeyValIter_const *next;
  HSTKeyValIter const ** Key;
};
struct unset_set_HSTKeyValIter_const {
  set_HSTKeyValIter_const Key;
  hash hash_code;
};


##########################################################################################
正在解析类型: std::unordered_map<std::set<HSTKeyValIter const &&>*,HSTKeyValIterLess>
{
  "std::unordered_map": {
    "std::unordered_map_T1": {
      "std::set": {
        "std::set_T1": "HSTKeyValIter const **"
      }
    },
    "std::unordered_map_T2": "HSTKeyValIterLess"
  }
}
------------------------------------------------------
struct set_HSTKeyValIter_const {
  set_HSTKeyValIter_const *next;
  HSTKeyValIter const ** Key;
};
struct udmap_set_HSTKeyValIter_const_HSTKeyValIterLess {
  set_HSTKeyValIter_const Key;
  HSTKeyValIterLess Value;
  hash hash_code;
};


##########################################################################################
正在解析类型: std::map<std::set<HSTKeyValIter const &&>*,HSTKeyValIterLess>
{
  "std::map": {
    "std::map_T1": {
      "std::set": {
        "std::set_T1": "HSTKeyValIter const **"
      }
    },
    "std::map_T2": "HSTKeyValIterLess"
  }
}
------------------------------------------------------
struct set_HSTKeyValIter_const {
  set_HSTKeyValIter_const *next;
  HSTKeyValIter const ** Key;
};
struct map_set_HSTKeyValIter_const_HSTKeyValIterLess {
  map_set_HSTKeyValIter_const_HSTKeyValIterLess *next;
  set_HSTKeyValIter_const Key;
  HSTKeyValIterLess Value;
  hash hash_code;
};


##########################################################################################
正在解析类型: std::tuple<int,unsigned short,float>
{
  "std::tuple": {
    "std::tuple_T1": "int",
    "std::tuple_T2": "unsigned short",
    "std::tuple_T3": "float"
  }
}
------------------------------------------------------
struct tpe_int_unsigned_short_float {
  int *Element_1;
  unsigned short Element_2;
  float Element_3;
};


##########################################################################################
正在解析类型: std::tuple<std::set<std::map<short, int>>, std::string, int>
{
  "std::tuple": {
    "std::tuple_T1": {
      "std::set": {
        "std::set_T1": {
          "std::map": {
            "std::map_T1": "short",
            "std::map_T2": "int"
          }
        }
      }
    },
    "std::tuple_T2": "std::string",
    "std::tuple_T3": "int"
  }
}
------------------------------------------------------
struct map_short_int {
  map_short_int *next;
  short Key;
  int Value;
  hash hash_code;
};
struct set_map_short_int {
  set_map_short_int *next;
  map_short_int Key;
};
struct tpe_set_map_short_int_std_string_int {
  set_map_short_int *Element_1;
  std::string Element_2;
  int Element_3;
};


##########################################################################################
正在解析类型: std::map<std::tuple<std::set<std::map<short,int>>, std::string, int>,int,less>
{
  "std::map": {
    "std::map_T1": {
      "std::tuple": {
        "std::tuple_T1": {
          "std::set": {
            "std::set_T1": {
              "std::map": {
                "std::map_T1": "short",
                "std::map_T2": "int"
              }
            }
          }
        },
        "std::tuple_T2": "std::string",
        "std::tuple_T3": "int"
      }
    },
    "std::map_T2": "int"
  }
}
------------------------------------------------------
struct map_short_int {
  map_short_int *next;
  short Key;
  int Value;
  hash hash_code;
};
struct set_map_short_int {
  set_map_short_int *next;
  map_short_int Key;
};
struct tpe_set_map_short_int_std_string_int {
  set_map_short_int *Element_1;
  std::string Element_2;
  int Element_3;
};
struct map_tpe_set_map_short_int_std_string_int_int {
  map_tpe_set_map_short_int_std_string_int_int *next;
  tpe_set_map_short_int_std_string_int Key;
  int Value;
  hash hash_code;
};


##########################################################################################
正在解析类型: std::vector<HSTVector<rt::nodegraph::Node*>>
{
  "std::vector": {
    "std::vector_T1": {
      "HSTVector": {
        "HSTVector_T1": "rt::nodegraph::Node*"
      }
    }
  }
}
------------------------------------------------------
struct vec_rt_nodegraph_Node {
  rt::nodegraph::Node* *vector_begin_0x0;
  rt::nodegraph::Node* *vector_end_0x8;
  rt::nodegraph::Node* *vector_cap_end_0x10;
};
struct HVec_vec_rt_nodegraph_Node {
  vec_rt_nodegraph_Node *inherit__0x0;
  int64_t hash_code;
};
struct vec_HVec_vec_rt_nodegraph_Node {
  HVec_vec_rt_nodegraph_Node *vector_begin_0x0;
  HVec_vec_rt_nodegraph_Node *vector_end_0x8;
  HVec_vec_rt_nodegraph_Node *vector_cap_end_0x10;
};


##########################################################################################
正在解析类型: std::unordered_map<std::map<double, int>, HSTVector<rt::nodegraph::Node*>>
{
  "std::unordered_map": {
    "std::unordered_map_T1": {
      "std::map": {
        "std::map_T1": "double",
        "std::map_T2": "int"
      }
    },
    "std::unordered_map_T2": {
      "HSTVector": {
        "HSTVector_T1": "rt::nodegraph::Node*"
      }
    }
  }
}
------------------------------------------------------
struct map_double_int {
  map_double_int *next;
  double Key;
  int Value;
  hash hash_code;
};
struct vec_rt_nodegraph_Node {
  rt::nodegraph::Node* *vector_begin_0x0;
  rt::nodegraph::Node* *vector_end_0x8;
  rt::nodegraph::Node* *vector_cap_end_0x10;
};
struct HVec_vec_rt_nodegraph_Node {
  vec_rt_nodegraph_Node *inherit__0x0;
  int64_t hash_code;
};
struct udmap_map_double_int_HVec_vec_rt_nodegraph_Node {
  map_double_int Key;
  HVec_vec_rt_nodegraph_Node Value;
  hash hash_code;
};


##########################################################################################
正在解析类型: std::tuple<std::set<std::map<short, int>>, std::string, int>
{
  "std::tuple": {
    "std::tuple_T1": {
      "std::set": {
        "std::set_T1": {
          "std::map": {
            "std::map_T1": "short",
            "std::map_T2": "int"
          }
        }
      }
    },
    "std::tuple_T2": "std::string",
    "std::tuple_T3": "int"
  }
}
------------------------------------------------------
struct map_short_int {
  map_short_int *next;
  short Key;
  int Value;
  hash hash_code;
};
struct set_map_short_int {
  set_map_short_int *next;
  map_short_int Key;
};
struct tpe_set_map_short_int_std_string_int {
  set_map_short_int *Element_1;
  std::string Element_2;
  int Element_3;
};


##########################################################################################
正在解析类型: std::map<std::tuple<std::set<std::map<short,int>>,std::string,int>,int>
{
  "std::map": {
    "std::map_T1": {
      "std::tuple": {
        "std::tuple_T1": {
          "std::set": {
            "std::set_T1": {
              "std::map": {
                "std::map_T1": "short",
                "std::map_T2": "int"
              }
            }
          }
        },
        "std::tuple_T2": "std::string",
        "std::tuple_T3": "int"
      }
    },
    "std::map_T2": "int"
  }
}
------------------------------------------------------
struct map_short_int {
  map_short_int *next;
  short Key;
  int Value;
  hash hash_code;
};
struct set_map_short_int {
  set_map_short_int *next;
  map_short_int Key;
};
struct tpe_set_map_short_int_std_string_int {
  set_map_short_int *Element_1;
  std::string Element_2;
  int Element_3;
};
struct map_tpe_set_map_short_int_std_string_int_int {
  map_tpe_set_map_short_int_std_string_int_int *next;
  tpe_set_map_short_int_std_string_int Key;
  int Value;
  hash hash_code;
};


##########################################################################################
正在解析类型: std::tuple<unsigned int, int, double>
{
  "std::tuple": {
    "std::tuple_T1": "unsigned int",
    "std::tuple_T2": "int",
    "std::tuple_T3": "double"
  }
}
------------------------------------------------------
struct tpe_unsigned_int_int_double {
  unsigned int *Element_1;
  int Element_2;
  double Element_3;
};


##########################################################################################
正在解析类型: std::unordered_map<std::map<double, int>, HSTVector<rt::nodegraph::Node>>
{
  "std::unordered_map": {
    "std::unordered_map_T1": {
      "std::map": {
        "std::map_T1": "double",
        "std::map_T2": "int"
      }
    },
    "std::unordered_map_T2": {
      "HSTVector": {
        "HSTVector_T1": "rt::nodegraph::Node"
      }
    }
  }
}
------------------------------------------------------
struct map_double_int {
  map_double_int *next;
  double Key;
  int Value;
  hash hash_code;
};
struct vec_rt_nodegraph_Node {
  rt::nodegraph::Node *vector_begin_0x0;
  rt::nodegraph::Node *vector_end_0x8;
  rt::nodegraph::Node *vector_cap_end_0x10;
};
struct HVec_vec_rt_nodegraph_Node {
  vec_rt_nodegraph_Node *inherit__0x0;
  int64_t hash_code;
};
struct udmap_map_double_int_HVec_vec_rt_nodegraph_Node {
  map_double_int Key;
  HVec_vec_rt_nodegraph_Node Value;
  hash hash_code;
};


