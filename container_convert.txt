##########################################################################################
//Input Type: std::vector<std::pair<int ,int > *>
{
  "std::vector": {
    "std::vector_T1": {
      "std::pair *": {
        "std::pair *_T1": "int",
        "std::pair *_T2": "int"
      }
    }
  }
}
------------------------------------------------------
struct pair_int_int {
  int first;
  int second;
};
struct vec_pair_int_int {
  pair_int_int * *vector_begin_0x0;
  pair_int_int * *vector_end_0x8;
  pair_int_int * *vector_cap_end_0x10;
};

##########################################################################################
//Input Type: std::tuple<HSTVector<rt::HARTRouteNetWrapper*>, std::shared_ptr<unsigned int>, std::map<double, int>, int>
{
  "std::tuple": {
    "std::tuple_T1": {
      "HSTVector": {
        "HSTVector_T1": "rt::HARTRouteNetWrapper*"
      }
    },
    "std::tuple_T2": {
      "std::shared_ptr": {
        "std::shared_ptr_T1": "unsigned int"
      }
    },
    "std::tuple_T3": {
      "std::map": {
        "std::map_T1": "double",
        "std::map_T2": "int"
      }
    },
    "std::tuple_T4": "int"
  }
}
------------------------------------------------------
struct vec_HARTRouteNetWrapper {
  rt::HARTRouteNetWrapper* *vector_begin_0x0;
  rt::HARTRouteNetWrapper* *vector_end_0x8;
  rt::HARTRouteNetWrapper* *vector_cap_end_0x10;
};
struct HSTVector_vec_HARTRouteNetWrapper {
  vec_HARTRouteNetWrapper inherit__0x0;
};
struct sharedPtr_unsigned_int {
  unsigned int *ptr;
  __int64 *count;
};
struct mapItr_double_int {
  uint64_t *header_color_0x0;
  uint64_t *header_parent_0x8;
  uint64_t *header_left_0x10;
  uint64_t *header_right_0x18;
  double Key;
  int Value;
};
struct tuple_HSTVector_vec_HARTRouteNetWrapper_sharedPtr_unsigned_int_mapItr_double_int_int {
  HSTVector_vec_HARTRouteNetWrapper Element_1;
  sharedPtr_unsigned_int Element_2;
  mapItr_double_int Element_3;
  int Element_4;
};

##########################################################################################
//Input Type: std::shared_ptr<int32_t>
{
  "std::shared_ptr": {
    "std::shared_ptr_T1": "int32_t"
  }
}
------------------------------------------------------
struct sharedPtr_int32_t {
  int32_t *ptr;
  __int64 *count;
};

##########################################################################################
//Input Type: HSTSet<unsigned int>
{
  "HSTSet": {
    "HSTSet_T1": "unsigned int"
  }
}
------------------------------------------------------
struct setItr_unsigned_int {
  uint64_t *header_color_0x0;
  setItr_unsigned_int *header_parent_0x8;
  setItr_unsigned_int *header_left_0x10;
  setItr_unsigned_int *header_right_0x18;
  unsigned int Key;
};
struct HSTSet_setItr_unsigned_int {
  setItr_unsigned_int inherit__0x0;
};

##########################################################################################
//Input Type: std::vector<std::pair<unsigned int,rt::HDRTNetGuide*>>
{
  "std::vector": {
    "std::vector_T1": {
      "std::pair": {
        "std::pair_T1": "unsigned int",
        "std::pair_T2": "rt::HDRTNetGuide*"
      }
    }
  }
}
------------------------------------------------------
struct pair_unsigned_int_HDRTNetGuide {
  unsigned int first;
  rt::HDRTNetGuide* second;
};
struct vec_pair_unsigned_int_HDRTNetGuide {
  pair_unsigned_int_HDRTNetGuide *vector_begin_0x0;
  pair_unsigned_int_HDRTNetGuide *vector_end_0x8;
  pair_unsigned_int_HDRTNetGuide *vector_cap_end_0x10;
};

##########################################################################################
//Input Type: std::unordered_map<std::map<double*, int>, std::HSTVector<rt::nodegraph::Node>>
{
  "std::unordered_map": {
    "std::unordered_map_T1": {
      "std::map": {
        "std::map_T1": "double*",
        "std::map_T2": "int"
      }
    },
    "std::unordered_map_T2": null
  }
}
------------------------------------------------------
struct mapItr_double_int {
  uint64_t *header_color_0x0;
  uint64_t *header_parent_0x8;
  uint64_t *header_left_0x10;
  uint64_t *header_right_0x18;
  double* Key;
  int Value;
};
struct udmapItr_mapItr_double_int {
  udmapItr_mapItr_double_int *_M_nxt;
  mapItr_double_int Key;
  mapItr_double_int Value;
};

##########################################################################################
//Input Type: HSTMap<HSTKeyValIter const &&,HSTKeyValIterLess>
{
  "HSTMap": {
    "HSTMap_T1": "HSTKeyValIter const **",
    "HSTMap_T2": "HSTKeyValIterLess"
  }
}
------------------------------------------------------
struct mapItr_HSTKeyValIter_const_HSTKeyValIterLess {
  uint64_t *header_color_0x0;
  uint64_t *header_parent_0x8;
  uint64_t *header_left_0x10;
  uint64_t *header_right_0x18;
  HSTKeyValIter const ** Key;
  HSTKeyValIterLess Value;
};
struct HSTMap_mapItr_HSTKeyValIter_const_HSTKeyValIterLess {
  mapItr_HSTKeyValIter_const_HSTKeyValIterLess *inherit__0x0;
};

##########################################################################################
//Input Type: std::map<unsigned int, double>
{
  "std::map": {
    "std::map_T1": "unsigned int",
    "std::map_T2": "double"
  }
}
------------------------------------------------------
struct mapItr_unsigned_int_double {
  uint64_t *header_color_0x0;
  uint64_t *header_parent_0x8;
  uint64_t *header_left_0x10;
  uint64_t *header_right_0x18;
  unsigned int Key;
  double Value;
};

##########################################################################################
//Input Type: HSTVector<rt::nodegraph::Node*>
{
  "HSTVector": {
    "HSTVector_T1": "rt::nodegraph::Node*"
  }
}
------------------------------------------------------
struct vec_Node {
  rt::nodegraph::Node* *vector_begin_0x0;
  rt::nodegraph::Node* *vector_end_0x8;
  rt::nodegraph::Node* *vector_cap_end_0x10;
};
struct HSTVector_vec_Node {
  vec_Node inherit__0x0;
};

##########################################################################################
//Input Type: HSTMap<HSTSet<HSTKeyValIter const &&>*,HSTKeyValIterLess>
{
  "HSTMap": {
    "HSTMap_T1": {
      "HSTSet*": {
        "HSTSet*_T1": "HSTKeyValIter const **"
      }
    },
    "HSTMap_T2": "HSTKeyValIterLess"
  }
}
------------------------------------------------------
struct setItr_HSTKeyValIter_const {
  uint64_t *header_color_0x0;
  setItr_HSTKeyValIter_const *header_parent_0x8;
  setItr_HSTKeyValIter_const *header_left_0x10;
  setItr_HSTKeyValIter_const *header_right_0x18;
  HSTKeyValIter const ** Key;
};
struct HSTSet_setItr_HSTKeyValIter_const {
  setItr_HSTKeyValIter_const inherit__0x0;
};
struct mapItr_HSTSet_setItr_HSTKeyValIter_const*_HSTKeyValIterLess {
  uint64_t *header_color_0x0;
  uint64_t *header_parent_0x8;
  uint64_t *header_left_0x10;
  uint64_t *header_right_0x18;
  HSTSet_setItr_HSTKeyValIter_const* Key;
  HSTKeyValIterLess Value;
};
struct HSTMap_mapItr_HSTSet_setItr_HSTKeyValIter_const*_HSTKeyValIterLess {
  mapItr_HSTSet_setItr_HSTKeyValIter_const*_HSTKeyValIterLess *inherit__0x0;
};

##########################################################################################
//Input Type: std::vector<rt::nodegraph::Node*>
{
  "std::vector": {
    "std::vector_T1": "rt::nodegraph::Node*"
  }
}
------------------------------------------------------
struct vec_Node {
  rt::nodegraph::Node* *vector_begin_0x0;
  rt::nodegraph::Node* *vector_end_0x8;
  rt::nodegraph::Node* *vector_cap_end_0x10;
};

##########################################################################################
//Input Type: std::vector<std::vector<rt::nodegraph::Node*>>
{
  "std::vector": {
    "std::vector_T1": {
      "std::vector": {
        "std::vector_T1": "rt::nodegraph::Node*"
      }
    }
  }
}
------------------------------------------------------
struct vec_Node {
  rt::nodegraph::Node* *vector_begin_0x0;
  rt::nodegraph::Node* *vector_end_0x8;
  rt::nodegraph::Node* *vector_cap_end_0x10;
};
struct vec_vec_Node {
  vec_Node *vector_begin_0x0;
  vec_Node *vector_end_0x8;
  vec_Node *vector_cap_end_0x10;
};

##########################################################################################
//Input Type: std::set<HSTKeyValIter const *,HSTKeyValIterLess>
{
  "std::set": {
    "std::set_T1": "HSTKeyValIter const *"
  }
}
------------------------------------------------------
struct setItr_HSTKeyValIter_const {
  uint64_t *header_color_0x0;
  setItr_HSTKeyValIter_const *header_parent_0x8;
  setItr_HSTKeyValIter_const *header_left_0x10;
  setItr_HSTKeyValIter_const *header_right_0x18;
  HSTKeyValIter const * Key;
};

##########################################################################################
//Input Type: std::set<std::set<HSTKeyValIter const &&>*,HSTKeyValIterLess>
{
  "std::set": {
    "std::set_T1": {
      "std::set*": {
        "std::set*_T1": "HSTKeyValIter const **"
      }
    }
  }
}
------------------------------------------------------
struct setItr_HSTKeyValIter_const {
  uint64_t *header_color_0x0;
  setItr_HSTKeyValIter_const *header_parent_0x8;
  setItr_HSTKeyValIter_const *header_left_0x10;
  setItr_HSTKeyValIter_const *header_right_0x18;
  HSTKeyValIter const ** Key;
};
struct setItr_setItr_HSTKeyValIter_const {
  uint64_t *header_color_0x0;
  setItr_setItr_HSTKeyValIter_const* *header_parent_0x8;
  setItr_setItr_HSTKeyValIter_const* *header_left_0x10;
  setItr_setItr_HSTKeyValIter_const* *header_right_0x18;
  setItr_HSTKeyValIter_const* Key;
};

##########################################################################################
//Input Type: std::unordered_set<std::set<HSTKeyValIter const &&>*,HSTKeyValIterLess>
{
  "std::unordered_set": {
    "std::unordered_set_T1": {
      "std::set*": {
        "std::set*_T1": "HSTKeyValIter const **"
      }
    }
  }
}
------------------------------------------------------
struct setItr_HSTKeyValIter_const {
  uint64_t *header_color_0x0;
  setItr_HSTKeyValIter_const *header_parent_0x8;
  setItr_HSTKeyValIter_const *header_left_0x10;
  setItr_HSTKeyValIter_const *header_right_0x18;
  HSTKeyValIter const ** Key;
};
struct udsetItr_setItr_HSTKeyValIter_const {
  udsetItr_setItr_HSTKeyValIter_const* *_M_nxt;
  int64_t Key;
};

##########################################################################################
//Input Type: std::unordered_map<std::set<HSTKeyValIter const &&>*,HSTKeyValIterLess>
{
  "std::unordered_map": {
    "std::unordered_map_T1": {
      "std::set*": {
        "std::set*_T1": "HSTKeyValIter const **"
      }
    },
    "std::unordered_map_T2": "HSTKeyValIterLess"
  }
}
------------------------------------------------------
struct setItr_HSTKeyValIter_const {
  uint64_t *header_color_0x0;
  setItr_HSTKeyValIter_const *header_parent_0x8;
  setItr_HSTKeyValIter_const *header_left_0x10;
  setItr_HSTKeyValIter_const *header_right_0x18;
  HSTKeyValIter const ** Key;
};
struct udmapItr_setItr_HSTKeyValIter_const*_HSTKeyValIterLess {
  udmapItr_setItr_HSTKeyValIter_const*_HSTKeyValIterLess *_M_nxt;
  setItr_HSTKeyValIter_const* Key;
  HSTKeyValIterLess Value;
};

##########################################################################################
//Input Type: std::map<std::set<HSTKeyValIter const &&>*,HSTKeyValIterLess>
{
  "std::map": {
    "std::map_T1": {
      "std::set*": {
        "std::set*_T1": "HSTKeyValIter const **"
      }
    },
    "std::map_T2": "HSTKeyValIterLess"
  }
}
------------------------------------------------------
struct setItr_HSTKeyValIter_const {
  uint64_t *header_color_0x0;
  setItr_HSTKeyValIter_const *header_parent_0x8;
  setItr_HSTKeyValIter_const *header_left_0x10;
  setItr_HSTKeyValIter_const *header_right_0x18;
  HSTKeyValIter const ** Key;
};
struct mapItr_setItr_HSTKeyValIter_const*_HSTKeyValIterLess {
  uint64_t *header_color_0x0;
  uint64_t *header_parent_0x8;
  uint64_t *header_left_0x10;
  uint64_t *header_right_0x18;
  setItr_HSTKeyValIter_const* Key;
  HSTKeyValIterLess Value;
};

##########################################################################################
//Input Type: std::tuple<int,unsigned short,float>
{
  "std::tuple": {
    "std::tuple_T1": "int",
    "std::tuple_T2": "unsigned short",
    "std::tuple_T3": "float"
  }
}
------------------------------------------------------
struct tuple_int_unsigned_short_float {
  int Element_1;
  unsigned short Element_2;
  float Element_3;
};

##########################################################################################
//Input Type: std::tuple<std::set<std::map<short, int>>, std::string, int>
{
  "std::tuple": {
    "std::tuple_T1": {
      "std::set": {
        "std::set_T1": {
          "std::map": {
            "std::map_T1": "short",
            "std::map_T2": "int"
          }
        }
      }
    },
    "std::tuple_T2": "std::string",
    "std::tuple_T3": "int"
  }
}
------------------------------------------------------
struct mapItr_short_int {
  uint64_t *header_color_0x0;
  uint64_t *header_parent_0x8;
  uint64_t *header_left_0x10;
  uint64_t *header_right_0x18;
  short Key;
  int Value;
};
struct setItr_mapItr_short_int {
  uint64_t *header_color_0x0;
  setItr_mapItr_short_int *header_parent_0x8;
  setItr_mapItr_short_int *header_left_0x10;
  setItr_mapItr_short_int *header_right_0x18;
  mapItr_short_int Key;
};
struct tuple_setItr_mapItr_short_int_string_int {
  setItr_mapItr_short_int Element_1;
  std::string Element_2;
  int Element_3;
};

##########################################################################################
//Input Type: std::map<std::tuple<std::set<std::map<short,int>>, std::string, int>,int,less>
{
  "std::map": {
    "std::map_T1": {
      "std::tuple": {
        "std::tuple_T1": {
          "std::set": {
            "std::set_T1": {
              "std::map": {
                "std::map_T1": "short",
                "std::map_T2": "int"
              }
            }
          }
        },
        "std::tuple_T2": "std::string",
        "std::tuple_T3": "int"
      }
    },
    "std::map_T2": "int"
  }
}
------------------------------------------------------
struct mapItr_short_int {
  uint64_t *header_color_0x0;
  uint64_t *header_parent_0x8;
  uint64_t *header_left_0x10;
  uint64_t *header_right_0x18;
  short Key;
  int Value;
};
struct setItr_mapItr_short_int {
  uint64_t *header_color_0x0;
  setItr_mapItr_short_int *header_parent_0x8;
  setItr_mapItr_short_int *header_left_0x10;
  setItr_mapItr_short_int *header_right_0x18;
  mapItr_short_int Key;
};
struct tuple_setItr_mapItr_short_int_string_int {
  setItr_mapItr_short_int Element_1;
  std::string Element_2;
  int Element_3;
};
struct mapItr_tuple_setItr_mapItr_short_int_string_int_int {
  uint64_t *header_color_0x0;
  uint64_t *header_parent_0x8;
  uint64_t *header_left_0x10;
  uint64_t *header_right_0x18;
  tuple_setItr_mapItr_short_int_string_int Key;
  int Value;
};

##########################################################################################
//Input Type: std::vector<HSTVector<rt::nodegraph::Node*>>
{
  "std::vector": {
    "std::vector_T1": {
      "HSTVector": {
        "HSTVector_T1": "rt::nodegraph::Node*"
      }
    }
  }
}
------------------------------------------------------
struct vec_Node {
  rt::nodegraph::Node* *vector_begin_0x0;
  rt::nodegraph::Node* *vector_end_0x8;
  rt::nodegraph::Node* *vector_cap_end_0x10;
};
struct HSTVector_vec_Node {
  vec_Node inherit__0x0;
};
struct vec_HSTVector_vec_Node {
  HSTVector_vec_Node *vector_begin_0x0;
  HSTVector_vec_Node *vector_end_0x8;
  HSTVector_vec_Node *vector_cap_end_0x10;
};

##########################################################################################
//Input Type: std::unordered_map<std::map<double, int>, HSTVector<rt::nodegraph::Node*>>
{
  "std::unordered_map": {
    "std::unordered_map_T1": {
      "std::map": {
        "std::map_T1": "double",
        "std::map_T2": "int"
      }
    },
    "std::unordered_map_T2": {
      "HSTVector": {
        "HSTVector_T1": "rt::nodegraph::Node*"
      }
    }
  }
}
------------------------------------------------------
struct mapItr_double_int {
  uint64_t *header_color_0x0;
  uint64_t *header_parent_0x8;
  uint64_t *header_left_0x10;
  uint64_t *header_right_0x18;
  double Key;
  int Value;
};
struct vec_Node {
  rt::nodegraph::Node* *vector_begin_0x0;
  rt::nodegraph::Node* *vector_end_0x8;
  rt::nodegraph::Node* *vector_cap_end_0x10;
};
struct HSTVector_vec_Node {
  vec_Node inherit__0x0;
};
struct udmapItr_mapItr_double_int_HSTVector_vec_Node {
  udmapItr_mapItr_double_int_HSTVector_vec_Node *_M_nxt;
  mapItr_double_int Key;
  HSTVector_vec_Node Value;
};

##########################################################################################
//Input Type: std::tuple<std::set<std::map<short, int>>, std::string, int>
{
  "std::tuple": {
    "std::tuple_T1": {
      "std::set": {
        "std::set_T1": {
          "std::map": {
            "std::map_T1": "short",
            "std::map_T2": "int"
          }
        }
      }
    },
    "std::tuple_T2": "std::string",
    "std::tuple_T3": "int"
  }
}
------------------------------------------------------
struct mapItr_short_int {
  uint64_t *header_color_0x0;
  uint64_t *header_parent_0x8;
  uint64_t *header_left_0x10;
  uint64_t *header_right_0x18;
  short Key;
  int Value;
};
struct setItr_mapItr_short_int {
  uint64_t *header_color_0x0;
  setItr_mapItr_short_int *header_parent_0x8;
  setItr_mapItr_short_int *header_left_0x10;
  setItr_mapItr_short_int *header_right_0x18;
  mapItr_short_int Key;
};
struct tuple_setItr_mapItr_short_int_string_int {
  setItr_mapItr_short_int Element_1;
  std::string Element_2;
  int Element_3;
};

##########################################################################################
//Input Type: std::map<std::tuple<std::set<std::map<short,int>>,std::string,int>,int>
{
  "std::map": {
    "std::map_T1": {
      "std::tuple": {
        "std::tuple_T1": {
          "std::set": {
            "std::set_T1": {
              "std::map": {
                "std::map_T1": "short",
                "std::map_T2": "int"
              }
            }
          }
        },
        "std::tuple_T2": "std::string",
        "std::tuple_T3": "int"
      }
    },
    "std::map_T2": "int"
  }
}
------------------------------------------------------
struct mapItr_short_int {
  uint64_t *header_color_0x0;
  uint64_t *header_parent_0x8;
  uint64_t *header_left_0x10;
  uint64_t *header_right_0x18;
  short Key;
  int Value;
};
struct setItr_mapItr_short_int {
  uint64_t *header_color_0x0;
  setItr_mapItr_short_int *header_parent_0x8;
  setItr_mapItr_short_int *header_left_0x10;
  setItr_mapItr_short_int *header_right_0x18;
  mapItr_short_int Key;
};
struct tuple_setItr_mapItr_short_int_string_int {
  setItr_mapItr_short_int Element_1;
  std::string Element_2;
  int Element_3;
};
struct mapItr_tuple_setItr_mapItr_short_int_string_int_int {
  uint64_t *header_color_0x0;
  uint64_t *header_parent_0x8;
  uint64_t *header_left_0x10;
  uint64_t *header_right_0x18;
  tuple_setItr_mapItr_short_int_string_int Key;
  int Value;
};

##########################################################################################
//Input Type: std::tuple<unsigned int, int, double>
{
  "std::tuple": {
    "std::tuple_T1": "unsigned int",
    "std::tuple_T2": "int",
    "std::tuple_T3": "double"
  }
}
------------------------------------------------------
struct tuple_unsigned_int_int_double {
  unsigned int Element_1;
  int Element_2;
  double Element_3;
};

##########################################################################################
//Input Type: std::unordered_map<std::map<double, int>, HSTVector<rt::nodegraph::Node>>
{
  "std::unordered_map": {
    "std::unordered_map_T1": {
      "std::map": {
        "std::map_T1": "double",
        "std::map_T2": "int"
      }
    },
    "std::unordered_map_T2": {
      "HSTVector": {
        "HSTVector_T1": "rt::nodegraph::Node"
      }
    }
  }
}
------------------------------------------------------
struct mapItr_double_int {
  uint64_t *header_color_0x0;
  uint64_t *header_parent_0x8;
  uint64_t *header_left_0x10;
  uint64_t *header_right_0x18;
  double Key;
  int Value;
};
struct vec_Node {
  rt::nodegraph::Node *vector_begin_0x0;
  rt::nodegraph::Node *vector_end_0x8;
  rt::nodegraph::Node *vector_cap_end_0x10;
};
struct HSTVector_vec_Node {
  vec_Node inherit__0x0;
};
struct udmapItr_mapItr_double_int_HSTVector_vec_Node {
  udmapItr_mapItr_double_int_HSTVector_vec_Node *_M_nxt;
  mapItr_double_int Key;
  HSTVector_vec_Node Value;
};

